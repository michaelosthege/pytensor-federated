# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: service.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    AsyncIterable,
    AsyncIterator,
    Dict,
    Iterable,
    List,
    Optional,
    Union,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from . import npproto


if TYPE_CHECKING:
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class FederatedLogpOpInput(betterproto.Message):
    """Metadata associated with an MCMC chain."""

    inputs: List["npproto.Ndarray"] = betterproto.message_field(1)
    """Multiple input arrays"""


@dataclass(eq=False, repr=False)
class FederatedLogpOpOutput(betterproto.Message):
    log_potential: "npproto.Ndarray" = betterproto.message_field(1)
    """Log-potential (must be scalar!)"""

    gradients: List["npproto.Ndarray"] = betterproto.message_field(2)
    """Gradients of log-potential w.r.t. inputs"""


class FederatedLogpOpStub(betterproto.ServiceStub):
    async def evaluate(
        self,
        federated_logp_op_input: "FederatedLogpOpInput",
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["_MetadataLike"] = None,
    ) -> "FederatedLogpOpOutput":
        return await self._unary_unary(
            "/FederatedLogpOp/Evaluate",
            federated_logp_op_input,
            FederatedLogpOpOutput,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def evaluate_stream(
        self,
        federated_logp_op_input_iterator: Union[
            AsyncIterable["FederatedLogpOpInput"], Iterable["FederatedLogpOpInput"]
        ],
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["_MetadataLike"] = None,
    ) -> AsyncIterator["FederatedLogpOpOutput"]:
        async for response in self._stream_stream(
            "/FederatedLogpOp/EvaluateStream",
            federated_logp_op_input_iterator,
            FederatedLogpOpInput,
            FederatedLogpOpOutput,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response


class FederatedLogpOpBase(ServiceBase):
    async def evaluate(
        self, federated_logp_op_input: "FederatedLogpOpInput"
    ) -> "FederatedLogpOpOutput":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def evaluate_stream(
        self, federated_logp_op_input_iterator: AsyncIterator["FederatedLogpOpInput"]
    ) -> AsyncIterator["FederatedLogpOpOutput"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_evaluate(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()
        response = await self.evaluate(request)
        await stream.send_message(response)

    async def __rpc_evaluate_stream(self, stream: grpclib.server.Stream) -> None:
        request = stream.__aiter__()
        await self._call_rpc_handler_server_stream(
            self.evaluate_stream,
            stream,
            request,
        )

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/FederatedLogpOp/Evaluate": grpclib.const.Handler(
                self.__rpc_evaluate,
                grpclib.const.Cardinality.UNARY_UNARY,
                FederatedLogpOpInput,
                FederatedLogpOpOutput,
            ),
            "/FederatedLogpOp/EvaluateStream": grpclib.const.Handler(
                self.__rpc_evaluate_stream,
                grpclib.const.Cardinality.STREAM_STREAM,
                FederatedLogpOpInput,
                FederatedLogpOpOutput,
            ),
        }
