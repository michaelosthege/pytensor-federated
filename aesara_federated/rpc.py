# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: service.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from . import npproto


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class InputArrays(betterproto.Message):
    """Input type message of the ArraysToArraysService"""

    items: List["npproto.Ndarray"] = betterproto.message_field(1)
    """A sequence of NumPy arrays"""


@dataclass(eq=False, repr=False)
class OutputArrays(betterproto.Message):
    """Output type message of the ArraysToArraysService"""

    items: List["npproto.Ndarray"] = betterproto.message_field(1)
    """A sequence of NumPy arrays"""


class ArraysToArraysServiceStub(betterproto.ServiceStub):
    async def evaluate(
        self,
        input_arrays: "InputArrays",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "OutputArrays":
        return await self._unary_unary(
            "/ArraysToArraysService/Evaluate",
            input_arrays,
            OutputArrays,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def evaluate_stream(
        self,
        input_arrays: "InputArrays",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "OutputArrays":
        return await self._unary_unary(
            "/ArraysToArraysService/EvaluateStream",
            input_arrays,
            OutputArrays,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class ArraysToArraysServiceBase(ServiceBase):
    async def evaluate(self, input_arrays: "InputArrays") -> "OutputArrays":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def evaluate_stream(self, input_arrays: "InputArrays") -> "OutputArrays":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_evaluate(
        self, stream: "grpclib.server.Stream[InputArrays, OutputArrays]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.evaluate(request)
        await stream.send_message(response)

    async def __rpc_evaluate_stream(
        self, stream: "grpclib.server.Stream[InputArrays, OutputArrays]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.evaluate_stream(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/ArraysToArraysService/Evaluate": grpclib.const.Handler(
                self.__rpc_evaluate,
                grpclib.const.Cardinality.UNARY_UNARY,
                InputArrays,
                OutputArrays,
            ),
            "/ArraysToArraysService/EvaluateStream": grpclib.const.Handler(
                self.__rpc_evaluate_stream,
                grpclib.const.Cardinality.UNARY_UNARY,
                InputArrays,
                OutputArrays,
            ),
        }
